from django.db import models
from InventoryServices.models import Warehouse
from UserServices.models import Users
from ProductServices.models import Products

# Create your models here.


class PurchaseOrder(models.Model):
    id = models.AutoField(primary_key=True)
    warehouse_id = models.ForeignKey(Warehouse , on_delete=models.CASCADE ,related_name='warehouse_id')
    supplier_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='supplier_id')
    last_updateb_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='last_updateb_by_user_id')
    po_code = models.CharField(max_length=50 , null=True , blank=True)
    po_date = models.DateField(null=True , blank=True)
    expected_delivery_date = models.DateField(null=True , blank=True)
    payment_terms = models.CharField(max_length=50 , null=True , blank=True , choices=[('credit','credit'),('cash','cash'),('cheque','cheque'),('online','online')])
    payment_status = models.CharField(max_length=50 , null=True , blank=True , choices=[('paid','paid'),('unpaid','unpaid'),('partial paid','partial paid') , ('advance','advance'), ('cancelled','cancelled')])
    total_amount = models.FloatField(null=True , blank=True)
    paid_amount = models.FloatField(null=True , blank=True)
    due_amount = models.FloatField(null=True , blank=True)
    discount_amount = models.FloatField(null=True , blank=True)
    discount_type = models.CharField(max_length=50 , null=True , blank=True , choices=[('percentage','percentage'),('fixed','fixed')])
    shipping_amount = models.FloatField(null=True , blank=True)
    shipping_type = models.CharField(max_length=50 , null=True , blank=True , choices=[('free','free'),('paid','paid')])
    shipping_tax_percentage = models.FloatField(null=True , blank=True)
    shipping_cancelled_amount = models.FloatField(null=True , blank=True)
    shipping_cancelled_tax_amount = models.FloatField(null=True , blank=True)
    additional_details = models.JSONField()
    status = models.CharField(max_length=50 , null=True , blank=True , choices=[('draft','draft'),('confirmed','confirmed'),('shipped','shipped'),('delivered','delivered'),('cancelled','cancelled') , ('returned','returned')])
    created_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='created_by_user_id')
    updated_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='updated_by_user_id')
    domain_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='domain_user_id')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    approved_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='approved_by_user_id')
    approved_at = models.DateTimeField(null=True , blank=True)
    cancelled_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='cancelled_by_user_id')
    cancelled_at = models.DateTimeField(null=True , blank=True)
    cancelled_reason = models.TextField(null=True , blank=True)
    recieved_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='recieved_by_user_id')
    recieved_at = models.DateTimeField(null=True , blank=True)
    returned_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='returned_by_user_id')
    returned_at = models.DateTimeField(null=True , blank=True)
    
    
    
class PurchaseOrderItems(models.Model):
    id = models.AutoField(primary_key=True)
    po_id = models.ForeignKey(PurchaseOrder , on_delete=models.CASCADE , related_name='po_id')
    product_id = models.ForeignKey(Products , on_delete=models.CASCADE , related_name='product_id')
    quantity_ordered = models.FloatField(null=True , blank=True)
    quantity_received = models.FloatField(null=True , blank=True)
    quantity_cancelled = models.FloatField(null=True , blank=True)
    quantity_returned = models.FloatField(null=True , blank=True)
    buying_price = models.FloatField(null=True , blank=True)
    selling_price = models.FloatField(null=True , blank=True)
    tax_percentage = models.FloatField(null=True , blank=True)
    disount_amount = models.FloatField(null=True , blank=True)
    amount_paid = models.FloatField(null=True , blank=True)
    amount_returned = models.FloatField(null=True , blank=True)
    amount_cancelled = models.FloatField(null=True , blank=True)
    amount_ordered = models.FloatField(null=True , blank=True)
    tax_percentage = models.FloatField(null=True , blank=True)
    tax_amount = models.FloatField(null=True , blank=True)
    shipping_amount = models.FloatField(null=True , blank=True)
    shipping_tax_amount = models.FloatField(null=True , blank=True)
    shipping_cancelled = models.FloatField(null=True , blank=True)
    shipping_cancelled_tax_amount = models.FloatField(null=True , blank=True)
    discount_type = models.CharField(max_length=50 , null=True , blank=True , choices=[('percentage','percentage'),('fixed','fixed')])
    additional_details = models.JSONField()
    status = models.CharField(max_length=50 , null=True , blank=True , choices=[('draft','draft'),('confirmed','confirmed'),('shipped','shipped'),('delivered','delivered'),('cancelled','cancelled') , ('returned','returned'), ('partial returned','partial returned')])
    created_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='created_by_user_id')
    updated_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='updated_by_user_id')
    domain_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='domain_user_id')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    approved_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='approved_by_user_id')
    approved_at = models.DateTimeField(null=True , blank=True)
    cancelled_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='cancelled_by_user_id')
    cancelled_at = models.DateTimeField(null=True , blank=True)
    cancelled_reason = models.TextField(null=True , blank=True)
    recieved_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='recieved_by_user_id')
    recieved_at = models.DateTimeField(null=True , blank=True)
    returned_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='returned_by_user_id')
    returned_at = models.DateTimeField(null=True , blank=True)
    
    
class PurchaseOrderInwardedLog(models.Model):
    id = models.AutoField(primary_key=True)
    po_id = models.ForeignKey(PurchaseOrder , on_delete=models.CASCADE , related_name='po_item_id')
    invoice_path = models.TextField()
    invoice_number = models.CharField(max_length=50 , null=True , blank=True)
    notes = models.TextField()
    inwarded_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='inwarded_by_user_id')
    inwarded_at = models.DateTimeField(auto_now_add=True)
    additional_details = models.JSONField()
    status = models.CharField(max_length=50 , null=True , blank=True , choices=[('draft','draft'),('confirmed','confirmed'),('shipped','shipped'),('recieved','recieved'),('partial recieved','partial recieved'),('cancelled','cancelled') , ('returned','returned')])
    domain_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='domain_user_id')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    
class PurchaseOrderItemInwardedLog(models.Model):
    id = models.AutoField(primary_key=True)
    po_item_id = models.ForeignKey(PurchaseOrderItems , on_delete=models.CASCADE , related_name='po_item_id')
    inwarded_quantity = models.FloatField(null=True , blank=True)
    price = models.FloatField(null=True , blank=True)
    tax_percentage = models.FloatField(null=True , blank=True)
    discount_amount = models.FloatField(null=True , blank=True)
    discount_type = models.CharField(max_length=50 , null=True , blank=True , choices=[('percentage','percentage'),('fixed','fixed')])
    shipping_amount = models.FloatField(null=True , blank=True)
    shipping_tax_percentage = models.FloatField(null=True , blank=True)
    additional_details = models.JSONField()
    status = models.CharField(max_length=50 , null=True , blank=True , choices=[('draft','draft'),('confirmed','confirmed'),('shipped','shipped'),('delivered','delivered'),('cancelled','cancelled') , ('returned','returned')])
    domain_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='domain_user_id')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    
    
    
class PurchaseOrderLogs(models.Model):
    id = models.AutoField(primary_key=True)
    po_id = models.ForeignKey(PurchaseOrder , on_delete=models.CASCADE , related_name='po_id')
    comment = models.TextField()
    additional_details = models.JSONField()
    created_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='created_by_user_id')
    domain_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='domain_user_id')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    
    
    
class SalesOrder(models.Model):
    id = models.AutoField(primary_key=True)
    customer_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='supplier_id')
    last_updateb_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='last_updateb_by_user_id')
    so_code = models.CharField(max_length=50 , null=True , blank=True)
    so_date = models.DateField(null=True , blank=True)
    expected_delivery_date = models.DateField(null=True , blank=True)
    payment_terms = models.CharField(max_length=50 , null=True , blank=True , choices=[('credit','credit'),('cash','cash'),('cheque','cheque'),('online','online')])
    payment_status = models.CharField(max_length=50 , null=True , blank=True , choices=[('paid','paid'),('unpaid','unpaid'),('partial paid','partial paid') , ('advance','advance'), ('cancelled','cancelled')])
    total_amount = models.FloatField(null=True , blank=True)
    paid_amount = models.FloatField(null=True , blank=True)
    due_amount = models.FloatField(null=True , blank=True)
    discount_amount = models.FloatField(null=True , blank=True)
    discount_type = models.CharField(max_length=50 , null=True , blank=True , choices=[('percentage','percentage'),('fixed','fixed')])
    shipping_amount = models.FloatField(null=True , blank=True)
    shipping_type = models.CharField(max_length=50 , null=True , blank=True , choices=[('free','free'),('paid','paid')])
    shipping_tax_percentage = models.FloatField(null=True , blank=True)
    shipping_cancelled_amount = models.FloatField(null=True , blank=True)
    shipping_cancelled_tax_amount = models.FloatField(null=True , blank=True)
    additional_details = models.JSONField()
    status = models.CharField(max_length=50 , null=True , blank=True , choices=[('draft','draft'),('confirmed','confirmed'),('shipped','shipped'),('delivered','delivered'),('partial delivered','partial delivered'),('cancelled','cancelled') , ('returned','returned')])
    created_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='created_by_user_id')
    updated_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='updated_by_user_id')
    domain_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='domain_user_id')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    approved_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='approved_by_user_id')
    approved_at = models.DateTimeField(null=True , blank=True)
    cancelled_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='cancelled_by_user_id')
    cancelled_at = models.DateTimeField(null=True , blank=True)
    cancelled_reason = models.TextField(null=True , blank=True)
    recieved_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='recieved_by_user_id')
    recieved_at = models.DateTimeField(null=True , blank=True)
    returned_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='returned_by_user_id')
    returned_at = models.DateTimeField(null=True , blank=True)
    
    
    
class SalesOrderItems(models.Model):
    id = models.AutoField(primary_key=True)
    so_id = models.ForeignKey(SalesOrder , on_delete=models.CASCADE , related_name='so_id')
    product_id = models.ForeignKey(Products , on_delete=models.CASCADE , related_name='product_id_so')
    quantity_ordered = models.FloatField(null=True , blank=True)
    quantity_delivered= models.FloatField(null=True , blank=True)
    quantity_shipped= models.FloatField(null=True , blank=True)
    quantity_cancelled = models.FloatField(null=True , blank=True)
    quantity_returned = models.FloatField(null=True , blank=True)
    purchase_price = models.FloatField(null=True , blank=True)
    tax_percentage = models.FloatField(null=True , blank=True)
    disount_amount = models.FloatField(null=True , blank=True)
    amount_paid = models.FloatField(null=True , blank=True)
    amount_returned = models.FloatField(null=True , blank=True)
    amount_cancelled = models.FloatField(null=True , blank=True)
    amount_ordered = models.FloatField(null=True , blank=True)
    tax_percentage = models.FloatField(null=True , blank=True)
    tax_amount = models.FloatField(null=True , blank=True)
    shipping_amount = models.FloatField(null=True , blank=True)
    shipping_tax_amount = models.FloatField(null=True , blank=True)
    shipping_cancelled = models.FloatField(null=True , blank=True)
    shipping_cancelled_tax_amount = models.FloatField(null=True , blank=True)
    discount_type = models.CharField(max_length=50 , null=True , blank=True , choices=[('percentage','percentage'),('fixed','fixed')])
    additional_details = models.JSONField()
    status = models.CharField(max_length=50 , null=True , blank=True , choices=[('draft','draft'),('confirmed','confirmed'),('shipped','shipped'),('delivered','delivered'),('partial delivered','partial delivered'),('cancelled','cancelled'), ('returned','returned'), ('partial returned','partial returned')])
    created_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='created_by_user_id')
    updated_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='updated_by_user_id')
    domain_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='domain_user_id')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    approved_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='approved_by_user_id')
    approved_at = models.DateTimeField(null=True , blank=True)
    cancelled_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='cancelled_by_user_id')
    cancelled_at = models.DateTimeField(null=True , blank=True)
    cancelled_reason = models.TextField(null=True , blank=True)
    shipped_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='recieved_by_user_id')
    shipped_at = models.DateTimeField(null=True , blank=True)
    returned_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='returned_by_user_id')
    returned_at = models.DateTimeField(null=True , blank=True)
    
    
class SalesOrderOutwardedLog(models.Model):
    id = models.AutoField(primary_key=True)
    so_id = models.ForeignKey(SalesOrder , on_delete=models.CASCADE , related_name='so_order_id')
    invoice_path = models.TextField()
    invoice_number = models.CharField(max_length=50 , null=True , blank=True)
    notes = models.TextField()
    outwarded_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='inwarded_by_user_id')
    outwarded_at = models.DateTimeField(auto_now_add=True)
    additional_details = models.JSONField()
    status = models.CharField(max_length=50 , null=True , blank=True , choices=[('draft','draft'),('confirmed','confirmed'),('shipped','shipped'),('delivered','delivered'),('partial delivered','partial delivered'),('cancelled','cancelled') , ('returned','returned')])
    domain_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='domain_user_id')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    
class SalesOrderItemOutwardedLog(models.Model):
    id = models.AutoField(primary_key=True)
    so_item_id = models.ForeignKey(SalesOrderItems , on_delete=models.CASCADE , related_name='so_item_id')
    outwarded_quantity = models.FloatField(null=True , blank=True)
    price = models.FloatField(null=True , blank=True)
    tax_percentage = models.FloatField(null=True , blank=True)
    discount_amount = models.FloatField(null=True , blank=True)
    discount_type = models.CharField(max_length=50 , null=True , blank=True , choices=[('percentage','percentage'),('fixed','fixed')])
    shipping_amount = models.FloatField(null=True , blank=True)
    shipping_tax_percentage = models.FloatField(null=True , blank=True)
    additional_details = models.JSONField()
    status = models.CharField(max_length=50 , null=True , blank=True , choices=[('draft','draft'),('confirmed','confirmed'),('shipped','shipped'),('delivered','delivered') ,('partial delivered','partial delivered') ,('cancelled','cancelled') , ('returned','returned')])
    domain_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='domain_user_id')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    
    
    
class SalesOrderLogs(models.Model):
    id = models.AutoField(primary_key=True)
    so_id = models.ForeignKey(SalesOrder , on_delete=models.CASCADE , related_name='so_id')
    comment = models.TextField()
    additional_details = models.JSONField()
    created_by_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='created_by_user_id')
    domain_user_id = models.ForeignKey(Users , on_delete=models.CASCADE , related_name='domain_user_id')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)